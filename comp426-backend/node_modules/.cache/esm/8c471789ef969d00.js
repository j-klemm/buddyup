let app,debug0,http,fs,path;_ef9‍.w("../app",[["default",["app"],function(v){app=v}]]);_ef9‍.w("debug",[["default",["debug0"],function(v){debug0=v}]]);_ef9‍.w("http",[["default",["http"],function(v){http=v}]]);_ef9‍.w("fs",[["default",["fs"],function(v){fs=v}]]);_ef9‍.w("path",[["default",["path"],function(v){path=v}]]);

/**
 * Module dependencies.
 */






const debug = debug0('server');


/**
 * check to see if the secret exists
 */
checkSecret();


/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */
const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      _ef9‍.g.console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      _ef9‍.g.console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;

  debug('Listening on ' + bind);
}

function checkSecret() {
  if (!process.env.SECRET_KEY) {
    debug('Environment variables SECRET_KEY not set.');
    debug('Generating key and creating/updating .env.');
    const filePath = path.join(__dirname, '..', '.env');
    const buffer = require('crypto').randomBytes(48);
    const token = buffer.toString('hex');
    fs.appendFileSync(filePath, `SECRET_KEY=${token}`);
    require('dotenv').config();
    if (!process.env.SECRET_KEY) {
      console.error('Unable to generate a secret key. Quitting.');
      process.exit();
    }
    debug(`Key generated. Do not share this secret key or commit the .env file to git.`)
  }
}
